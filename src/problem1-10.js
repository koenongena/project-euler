/*
Problem 1: Multiples of 3 and 5

<p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>
<p>Find the sum of all the multiples of 3 or 5 below 1000.</p>
 */

import * as R from "ramda";

const isDivisibleBy = R.curry((denominator, number) => number % denominator === 0);
const isDivisibleByAny = (a) => R.anyPass(R.map(isDivisibleBy, a))
const isDivisibleBy3Or5 = isDivisibleByAny([3, 5]);

const filterMultiplesOf3And5 = R.filter(isDivisibleBy3Or5);

const isEven = (n) => n % 2 === 0;
const lastEntryIsGte = (n) => R.pipe(R.last, R.gte(R.__, n));

function fibonacciNumbersBelow(n) {
    const appendNewFib = (arr) => {
        const [a, b] = R.takeLast(2, arr);
        return R.append(a + b, arr);
    }


    return R.dropLast(1, R.until(lastEntryIsGte(n), appendNewFib, [1, 2]));
}

/*
Even Fibonacci numbers
Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

/*
Largest prime factor
[Show HTML problem content]
Problem 3

The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
*/

const primeFactors = (n) => {
    const findPrimeFactorStartingFrom = (primeFactor, n) => {
        return R.until(isDivisibleBy(R.__, n), R.inc, primeFactor);
    }

    const _primeFactors = (n, factors) => {
        if (n === 1) {
            return factors;
        }
        const lastKnownFactor = R.defaultTo(R.last(factors), 2);
        const nextPrimeFactor = findPrimeFactorStartingFrom(lastKnownFactor, n);
        const nextNumber = R.until(R.complement(isDivisibleBy(nextPrimeFactor)), R.divide(R.__, nextPrimeFactor), n);
        return _primeFactors(nextNumber, factors.concat(nextPrimeFactor));
    }

    return _primeFactors(n, []);
};

/*
Largest palindrome product
Problem 4

A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers.

 */

const isPalindrome = (n) => R.equals(n.toString(), R.reverse(n.toString()));

const findLargestPalindrome = (max) => {
    return R.pipe(
        R.converge(R.xprod, [R.range(1), R.range(1)]),
        R.map(([a, b]) => a * b),
        R.sort(R.descend(R.identity)),
        R.find(isPalindrome),
    )(max);
};

(() => {
    console.log("Problem 1: " + R.sum(filterMultiplesOf3And5(R.range(0, 1000))));

    console.log("Problem 2: " + R.sum(R.filter(isEven, fibonacciNumbersBelow(4_000_000))))

    console.log("Problem 3: " + R.apply(Math.max, primeFactors(600851475143)));

    console.log("Problem 4: " + findLargestPalindrome(1000));
    // console.log("Problem 4: " + evenlyDivisble(findLargestPalindrome(1000)));
})();
